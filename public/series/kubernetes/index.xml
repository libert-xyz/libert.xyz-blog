<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on libert.xyz</title>
    <link>https://libert.xyz/series/kubernetes/</link>
    <description>Recent content in kubernetes on libert.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Aug 2019 16:06:55 -0400</lastBuildDate>
    
	<atom:link href="https://libert.xyz/series/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Namespaces resources quotas</title>
      <link>https://libert.xyz/posts/namespaces-quotas/</link>
      <pubDate>Wed, 28 Aug 2019 16:06:55 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/namespaces-quotas/</guid>
      <description>The Limits and Requests are set for each container, what about if we want to apply Limits to namespaces?
LimitRange Object The LimitRange resource. It allows you to specify (for each namespace) not only the minimum and maximum limit you can set on a container for each resource but also the default requests for containers that don’t specify requests.
LimitRange use case A great use case for LimitRange is to prevent users from creating pods that are bigger than the node&amp;rsquo;s resources in the cluster.</description>
    </item>
    
    <item>
      <title>PODS QoS</title>
      <link>https://libert.xyz/posts/pods-qos/</link>
      <pubDate>Tue, 27 Aug 2019 18:47:59 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pods-qos/</guid>
      <description>There is no option or field to assign Quality of service to a pod but a combination between Requests and Limits give us the ability to define Quality of service.
QoS Classes  BestEffort class (no request and limits set) Guaranteed class (requests are equal to limits) Burstable class (one container has limit set but another don&amp;rsquo;t)  Looking at QoS at the POD level is confusing because a POD can have one or multiple containers.</description>
    </item>
    
    <item>
      <title>PODS Requests &amp; Limits</title>
      <link>https://libert.xyz/posts/pods-requests-limits/</link>
      <pubDate>Mon, 26 Aug 2019 13:15:19 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pods-requests-limits/</guid>
      <description>When creating a pod we can specify the amount of CPU and memory that a container needs. If a POD has more than one container requests and limits are specified individually for each container.
E.g.
If you don&amp;rsquo;t specify a CPU request the Kubernetes Scheduler will take the decisions of resource allocations for you. In the worst-case scenario, the container may not get any CPU at all.
Understanding CPU Units The CPU resource is measured in CPU units.</description>
    </item>
    
    <item>
      <title>Highly Available Kubernetes Cluster</title>
      <link>https://libert.xyz/posts/kubernetes-ha/</link>
      <pubDate>Mon, 10 Jun 2019 14:43:55 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-ha/</guid>
      <description>HA Kubernetes One of the reasons for using Kubernetes in the first place is to have a high available, fully scalable application so the users can experience a smoothly interaction with the application.
Out of the box, Kubernetes and all the components are ready meant to be HA. In this post, we are going to explore the best ways to achieve HA in Kubernetes.
Making your apps Highly Available Making your apps HA is simple when using Kubernetes.</description>
    </item>
    
    <item>
      <title>Kubernetes Services insights</title>
      <link>https://libert.xyz/posts/pod-services/</link>
      <pubDate>Wed, 05 Jun 2019 14:53:00 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pod-services/</guid>
      <description>Kubernetes Services The kube-proxy manages everything related to services.
In summary, a service has the following characteristics
 Each service gets its own stable IP address and port. Clients and pods connect to the service ip address and port. The IP address is virtual The IP address in not assigned to any network interface and is not listed as source or destination IP address in a network packet when the packet leaves the node.</description>
    </item>
    
    <item>
      <title>Diving deeper into pod networking</title>
      <link>https://libert.xyz/posts/pod-networking/</link>
      <pubDate>Sun, 02 Jun 2019 15:37:05 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pod-networking/</guid>
      <description>Inter-pod networking Networking is one of the most complex pieces in Kubernetes, let&amp;rsquo;s try to summarize pod networking and apply the divide and conquer paradigm.
 Each pod gets its own unique IP address. Each pod can communicate with all other pods through a flat, NATless network.  How Kubernetes does it? The networking is set up by the System Administrator or by a Container Network Interace (CNI) plugin.</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt2</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p2/</link>
      <pubDate>Fri, 24 May 2019 17:17:33 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p2/</guid>
      <description>If you haven&amp;rsquo;t yet, check the first part here K8 Architecture Summary Pt2 What happens when we submit a pod manifest to the API server? Before any event, the Controler Manager, Scheduler and the Kubelet are in &amp;ldquo;watching mode&amp;rdquo; waiting for a new event for their respective resources types in the API Server
Deployment manifest created Now you executed the command kubectl create -f deployment.yaml
This happens next:
 The API Server verifies the Deployment specifications Stores it in etcd Returns a response to kubectl  After the following chain of events takes place</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt1</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p1/</link>
      <pubDate>Sun, 12 May 2019 13:34:45 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p1/</guid>
      <description>Learning Kubernetes (k8 for short) is already complex, to make it even funnier I decided to go one level below and learn (or try) how this container orchestrator works behind scenes.
Most of the references come from blogs like Julia Evans, Kubernetes Documentation and this awesome book called Kubernetes in Action
K8 Architecture Summary In a nutshell, k8 has two components
1. Control Plane (master node)
 API Server Scheduler Control Manager etcd (key-value storage)  2.</description>
    </item>
    
    <item>
      <title>Service accounts &amp; RBAC Authorization</title>
      <link>https://libert.xyz/posts/rbac-authorization/</link>
      <pubDate>Sat, 13 Apr 2019 15:25:21 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/rbac-authorization/</guid>
      <description>When a request is received by the API Server (kubectl) it goes through a list of authentication plugins. The plugins examine the request and determine who is sending the request.
An authentication plugin returns the username and group of the authenticated user. Kubernetes doesn’t store that information anywhere; it uses it to verify whether the user is authorized to perform an action or not.
Users Kind of clients connecting the API Server:</description>
    </item>
    
  </channel>
</rss>