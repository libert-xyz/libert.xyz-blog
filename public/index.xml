<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libert.xyz</title>
    <link>https://libert.xyz/</link>
    <description>Recent content on libert.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Jun 2019 15:37:05 -0400</lastBuildDate>
    
	<atom:link href="https://libert.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Diving deeper into pod networking</title>
      <link>https://libert.xyz/posts/pod-networking/</link>
      <pubDate>Sun, 02 Jun 2019 15:37:05 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pod-networking/</guid>
      <description>Inter-pod networking Networking is one of the most complex pieces in Kubernetes, let&amp;rsquo;s try to summarize pod networking and apply the divide and conquer paradigm.
 Each pod gets its own unique IP address. Each pod can communicate with all other pods through a flat, NATless network.  How Kubernetes does it? The networking is set up by the System Administrator or by a Container Network Interace (CNI) plugin.</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt2</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p2/</link>
      <pubDate>Fri, 24 May 2019 17:17:33 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p2/</guid>
      <description>If you haven&amp;rsquo;t yet, check the first part here K8 Architecture Summary Pt2 What happens when we submit a pod manifest to the API server? Before any event, the Controler Manager, Scheduler and the Kubelet are in &amp;ldquo;watching mode&amp;rdquo; waiting for a new event for their respective resources types in the API Server
Deployment manifest created Now you executed the command kubectl create -f deployment.yaml
This happens next:
 The API Server verifies the Deployment specifications Stores it in etcd Returns a response to kubectl  After the following chain of events takes place</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt1</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p1/</link>
      <pubDate>Sun, 12 May 2019 13:34:45 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p1/</guid>
      <description>Learning Kubernetes (k8 for short) is already complex, to make it even funnier I decided to go one level below and learn (or try) how this container orchestrator works behind scenes.
Most of the references come from blogs like Julia Evans, Kubernetes Documentation and this awesome book called Kubernetes in Action
K8 Architecture Summary In a nutshell, k8 has two components
1. Control Plane (master node)
 API Server Scheduler Control Manager etcd (key-value storage)  2.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://libert.xyz/about/</link>
      <pubDate>Tue, 26 Jun 2018 12:10:58 -0400</pubDate>
      
      <guid>https://libert.xyz/about/</guid>
      <description>Hey there, Iâ€™m Libert, and I work as a consultant that specializes in introducing a DevOps culture in teams and building cost effective Cloud Computing solutions.
Software controls the world we live in, from the moment that we order our favorite coffee to the moment that we take a plane, I&amp;rsquo;m really exited to be part of this revolution and help future companies to build new solutions to traditional problems.</description>
    </item>
    
    <item>
      <title>Easiest dockerfile</title>
      <link>https://libert.xyz/posts/easiest-dockerfile/</link>
      <pubDate>Tue, 01 Sep 2015 11:59:37 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/easiest-dockerfile/</guid>
      <description>We use a Dockerfile to build a Docker Images, we can write specific instructions such a install a package, update the system and define the ports that the container will be listen.
In the following example we write a Dockerfile in the /root directory
## Dockerfile that modifies centos:latest FROM centos:latest MAINTAINER User Name &amp;lt;username@domain.com&amp;gt; ## Update the server OS RUN yum -y upgrade ## Install Apache Web Server RUN yum -y install httpd ## Install OpenSSH-Server RUN yum -y install openssh-server ## Expose the SSH and Web Ports for attachment EXPOSE 22 80 Now we execute the build command</description>
    </item>
    
  </channel>
</rss>