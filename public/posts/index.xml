<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on libert.xyz</title>
    <link>https://libert.xyz/posts/</link>
    <description>Recent content in Posts on libert.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Jun 2019 15:12:45 -0400</lastBuildDate>
    
	<atom:link href="https://libert.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RUN or CMD or ENTRYPOINT</title>
      <link>https://libert.xyz/posts/run-cmd-entrypoint/</link>
      <pubDate>Wed, 12 Jun 2019 15:12:45 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/run-cmd-entrypoint/</guid>
      <description>One of the most confusing parts of a Dockerfile for me it has always been the part where we execute or initiate the application.
In Summary  RUN executes command(s) in a new layer on top of the current image. Often used to install packages and dependencies.
 CMD sets default command and/or parameters, can be overwritten from the command line when docker container runs.
 ENTRYPOINT Allows you to configure a container to run as an executable.</description>
    </item>
    
    <item>
      <title>Highly Available Kubernetes Cluster</title>
      <link>https://libert.xyz/posts/kubernetes-ha/</link>
      <pubDate>Mon, 10 Jun 2019 14:43:55 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-ha/</guid>
      <description>HA Kubernetes One of the reasons for using Kubernetes in the first place is to have a high available, fully scalable application so the users can experience a smoothly interaction with the application.
Out of the box, Kubernetes and all the components are ready meant to be HA. In this post, we are going to explore the best ways to achieve HA in Kubernetes.
Making your apps Highly Available Making your apps HA is simple when using Kubernetes.</description>
    </item>
    
    <item>
      <title>Kubernetes Services insights</title>
      <link>https://libert.xyz/posts/pod-services/</link>
      <pubDate>Wed, 05 Jun 2019 14:53:00 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pod-services/</guid>
      <description>Kubernetes Services The kube-proxy manages everything related to services.
In summary, a service has the following characteristics
 Each service gets its own stable IP address and port. Clients and pods connect to the service ip address and port. The IP address is virtual The IP address in not assigned to any network interface and is not listed as source or destination IP address in a network packet when the packet leaves the node.</description>
    </item>
    
    <item>
      <title>Diving deeper into pod networking</title>
      <link>https://libert.xyz/posts/pod-networking/</link>
      <pubDate>Sun, 02 Jun 2019 15:37:05 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/pod-networking/</guid>
      <description>Inter-pod networking Networking is one of the most complex pieces in Kubernetes, let&amp;rsquo;s try to summarize pod networking and apply the divide and conquer paradigm.
 Each pod gets its own unique IP address. Each pod can communicate with all other pods through a flat, NATless network.  How Kubernetes does it? The networking is set up by the System Administrator or by a Container Network Interace (CNI) plugin.</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt2</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p2/</link>
      <pubDate>Fri, 24 May 2019 17:17:33 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p2/</guid>
      <description>If you haven&amp;rsquo;t yet, check the first part here K8 Architecture Summary Pt2 What happens when we submit a pod manifest to the API server? Before any event, the Controler Manager, Scheduler and the Kubelet are in &amp;ldquo;watching mode&amp;rdquo; waiting for a new event for their respective resources types in the API Server
Deployment manifest created Now you executed the command kubectl create -f deployment.yaml
This happens next:
 The API Server verifies the Deployment specifications Stores it in etcd Returns a response to kubectl  After the following chain of events takes place</description>
    </item>
    
    <item>
      <title>Kubernetes Internals Deep Dive Summary Pt1</title>
      <link>https://libert.xyz/posts/kubernetes-internals-p1/</link>
      <pubDate>Sun, 12 May 2019 13:34:45 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/kubernetes-internals-p1/</guid>
      <description>Learning Kubernetes (k8 for short) is already complex, to make it even funnier I decided to go one level below and learn (or try) how this container orchestrator works behind scenes.
Most of the references come from blogs like Julia Evans, Kubernetes Documentation and this awesome book called Kubernetes in Action
K8 Architecture Summary In a nutshell, k8 has two components
1. Control Plane (master node)
 API Server Scheduler Control Manager etcd (key-value storage)  2.</description>
    </item>
    
    <item>
      <title>Containers &amp; Docker Images</title>
      <link>https://libert.xyz/posts/containers-docker/</link>
      <pubDate>Sat, 10 Nov 2018 14:53:00 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/containers-docker/</guid>
      <description>Containers are getting more popular year by year and more companies are adopting containers as their default development environment.
One of the primary reasons for the rapid adoption are the flexibility to package the application code, share it and running anywhere regardless of the operating system host. Another reason is the mass adoption of Microservices Architectures.
A Hello World container The busybox images contain the basic UNIX tools like echo, ls and so on.</description>
    </item>
    
    <item>
      <title>AWS/Amazon Global Network - Re:Invent 2016</title>
      <link>https://libert.xyz/posts/aws-vpc-deep/</link>
      <pubDate>Mon, 10 Oct 2016 14:43:55 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/aws-vpc-deep/</guid>
      <description>AWS rarely gives us insights about how they manage their data centers, there is no too much information about what kind of hardware they use and how they can scale quickly.
This is because I found the talk AWS re:Invent 2016 called Amazon Global Network Overview really enjoyable.
James Hamilton (Vice President and Distinguished Engineer) gives us an amazing overview of how the magic happens behind AWS datacenters.
With 14 regions across the world.</description>
    </item>
    
    <item>
      <title>Easiest dockerfile</title>
      <link>https://libert.xyz/posts/easiest-dockerfile/</link>
      <pubDate>Tue, 01 Sep 2015 11:59:37 -0400</pubDate>
      
      <guid>https://libert.xyz/posts/easiest-dockerfile/</guid>
      <description>We use a Dockerfile to build a Docker Images, we can write specific instructions such a install a package, update the system and define the ports that the container will be listen.
In the following example we write a Dockerfile in the /root directory
## Dockerfile that modifies centos:latest FROM centos:latest MAINTAINER User Name &amp;lt;username@domain.com&amp;gt; ## Update the server OS RUN yum -y upgrade ## Install Apache Web Server RUN yum -y install httpd ## Install OpenSSH-Server RUN yum -y install openssh-server ## Expose the SSH and Web Ports for attachment EXPOSE 22 80 Now we execute the build command</description>
    </item>
    
  </channel>
</rss>